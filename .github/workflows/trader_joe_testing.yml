name: Trader Joe Testing

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  SOURCE_PATHS: "./common ./router ./schemas ./data"

jobs:
  testing:
    name: Testing
    runs-on: ubuntu-latest
    container: debian:bookworm-slim
    env:
      UV_LINK_MODE: copy
      POSTGRES_ASYNC: true
      POSTGRES_SYNC: true

    steps:
    - uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v5
      with:
        # Install a specific version of uv.
        version: "0.6.4"

    - name: Install dependencies
      run: |
        uv sync --all-groups --no-group security --locked
    - name: Run Ruff Linting
      run: |
        uv run ruff check .
    - name: Run Unit Tests
      run: |
        uv run pytest -s

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    container: debian:bookworm-slim
    steps:
    - uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v5
      with:
        # Install a specific version of uv.
        version: "0.6.4"

    - name: Install Security Group
      run: |
        uv sync --only-group security --locked

    - name: Run Bandit
      run: |
        uv run bandit -r ${{ env.SOURCE_PATHS }} --exclude tests/

    - name: Run SemGrep
      run: |
        uv run semgrep --config=auto --exclude=tests/ --exclude=.venv --exclude=docker-compose.override.yaml .

    - name: Generate Requirements
      run: |
        uv export --all-groups --no-group dev --no-group testing --no-group security --locked --format requirements-txt > requirements.txt

    - name: Run Safety CLI
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}

    - name: Run Pip-Audit
      run: |
        uv run pip-audit -r requirements.txt --disable-pip

  build:
    name: Image Build
    runs-on: ubuntu-latest
    needs:
      - testing
      - security

    steps:
    - uses: actions/checkout@v4

    - name: Get Commit Hash
      id: commit_hash
      run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Log in to GitHub Container Registry (GHCR)
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Images
      run: |
        docker compose -f docker-compose.yaml build

    - name: Push Data Store Image
      run: |
        docker tag trader_joe_data_store ghcr.io/${{ github.repository_owner }}/trader_joe_data_store:${{ env.SHORT_SHA }}
        docker tag trader_joe_data_store ghcr.io/${{ github.repository_owner }}/trader_joe_data_store:latest
        docker push ghcr.io/${{ github.repository_owner }}/trader_joe_data_store:${{ env.SHORT_SHA }}
        docker push ghcr.io/${{ github.repository_owner }}/trader_joe_data_store:latest

    - name: Push Data Ingest Image
      run: |
        docker tag trader_joe_data_ingest ghcr.io/${{ github.repository_owner }}/trader_joe_data_ingest:${{ env.SHORT_SHA }}
        docker tag trader_joe_data_ingest ghcr.io/${{ github.repository_owner }}/trader_joe_data_ingest:latest
        docker push ghcr.io/${{ github.repository_owner }}/trader_joe_data_ingest:${{ env.SHORT_SHA }}
        docker push ghcr.io/${{ github.repository_owner }}/trader_joe_data_ingest:latest