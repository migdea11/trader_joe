name: Trader Joe Testing

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

env:
  UV_VERSION: "0.9.3"
  SOURCE_PATHS: "./common ./router ./schemas ./data"

jobs:
  testing:
    name: Linting and Unit Testing
    runs-on: ubuntu-latest
    container: debian:bookworm-slim
    env:
      UV_LINK_MODE: copy
      POSTGRES_ASYNC: true
      POSTGRES_SYNC: true

    steps:
    - uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v6
      with:
        version: "${{ env.UV_VERSION }}"

    - name: Install dependencies
      run: |
        uv sync --all-groups --no-group security --locked
    - name: Run Ruff Linting
      run: |
        uv run ruff check .
    - name: Run Unit Tests
      run: |
        uv run pytest -s

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v6
      with:
        version: "${{ env.UV_VERSION }}"

    - name: Install Security Group
      run: |
        uv sync --only-group security --locked

    - name: Run Bandit
      run: |
        uv run bandit -r ${{ env.SOURCE_PATHS }} --exclude tests/

    - name: Run SemGrep
      run: |
        uv run semgrep --config=auto --exclude=tests/ --exclude=.venv --exclude=docker-compose.override.yaml .

    - name: Generate Requirements
      run: |
        uv export --all-groups --no-group dev --no-group testing --no-group security --locked --format requirements-txt > requirements.txt

    - name: Run Safety CLI
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}

    - name: Run Pip-Audit
      run: |
        uv run pip-audit -r requirements.txt --disable-pip

  build:
    name: Image Build
    runs-on: ubuntu-latest
    needs:
      - testing
      - security
    outputs:
      BRANCH_NAME: ${{ steps.branch_name.outputs.BRANCH_NAME }}
      IMAGE_STORE: ${{ steps.push_store.outputs.IMAGE }}
      IMAGE_INGEST: ${{ steps.push_ingest.outputs.IMAGE }}

    steps:
    - uses: actions/checkout@v4

    - name: Get Branch Name
      id: branch_name
      run: |
        # set as a step output so other jobs can consume it
        echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

    - name: Get Commit Hash
      id: commit_hash
      run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Registry Login
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Images
      run: |
        cp .env.default .env
        cp data/ingest/.env.default data/ingest/.env
        cp data/store/.env.default data/store/.env
        docker compose -f docker-compose.yaml build
        docker images  # List built images

    - name: Push Image - Data Store
      id: push_store
      run: |
        # tag with short sha and push to GHCR
        IMAGE_STORE=ghcr.io/${{ github.repository_owner }}/trader_joe_data_store:${SHORT_SHA}
        docker tag trader_joe_data_store $IMAGE_STORE
        docker push $IMAGE_STORE
        echo "IMAGE=$IMAGE_STORE" >> $GITHUB_OUTPUT

    - name: Push Image - Data Ingest
      id: push_ingest
      run: |
        IMAGE_INGEST=ghcr.io/${{ github.repository_owner }}/trader_joe_data_ingest:${SHORT_SHA}
        docker tag trader_joe_data_ingest $IMAGE_INGEST
        docker push $IMAGE_INGEST
        echo "IMAGE=$IMAGE_INGEST" >> $GITHUB_OUTPUT

    - name: Setup Pipeline Configs
      run: |
        mkdir -p artifact
        cp docker-compose.yaml artifact/
        cp .env.default artifact/.env.default

        mkdir -p artifact/data/ingest artifact/data/store
        cp data/ingest/.env.default artifact/data/ingest/.env.default
        cp data/store/.env.default artifact/data/store/.env.default
        ls -lahR artifact/

    - name: Push Pipeline Configs
      uses: actions/upload-artifact@v4
      with:
        name: pipeline-configs-${{ steps.branch_name.outputs.BRANCH_NAME }}
        path: artifact/
        include-hidden-files: true

  system:
    name: System Testing
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: Registry Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Pipeline Configs
        uses: actions/download-artifact@v5
        with:
          name: pipeline-configs-${{ needs.build.outputs.BRANCH_NAME }}
          path: artifact

      - name: Stage Pipeline Configs
        run: |
          ls -lahR artifact/
          cp artifact/docker-compose.yaml ./docker-compose.yaml
          cp artifact/.env.default ./.env

          mkdir -p data/ingest
          cp artifact/data/ingest/.env.default data/ingest/.env
          mkdir -p data/store
          cp artifact/data/store/.env.default data/store/.env


      - name: Pull Docker Images
        run: |
          echo "Pulling ${{ needs.build.outputs.IMAGE_STORE }}"
          docker pull ${{ needs.build.outputs.IMAGE_STORE }}
          echo "Pulling ${{ needs.build.outputs.IMAGE_INGEST }}"
          docker pull ${{ needs.build.outputs.IMAGE_INGEST }}

          docker tag ${{ needs.build.outputs.IMAGE_STORE }} trader_joe_data_store
          docker tag ${{ needs.build.outputs.IMAGE_INGEST }} trader_joe_data_ingest
          docker images  # Verify images are loaded

      - name: Add Runtime Configs
        run: |
          cat >> data/ingest/.env <<EOF
          ALPACA_API_KEY=${{ secrets.ALPACA_API_KEY }}
          ALPACA_API_SECRET=${{ secrets.ALPACA_API_SECRET }}
          EOF
          chmod 600 data/ingest/.env
          cat data/ingest/.env

      - name: Start System
        run: |
          ls -lah
          docker compose -f docker-compose.yaml up -d
          docker ps  # Verify containers are running

      - name: Clean Runtime Configs
        if: always()
        run: |
          shred -u .env || rm -f .env
          shred -u data/ingest/.env || rm -f data/ingest/.env
          shred -u data/store/.env || rm -f data/store/.env

    # - name: Push Data Store Image
    #   run: |
    #     docker tag trader_joe_data_store ghcr.io/${{ github.repository_owner }}/trader_joe_data_store:${{ env.SHORT_SHA }}
    #     docker tag trader_joe_data_store ghcr.io/${{ github.repository_owner }}/trader_joe_data_store:latest
    #     docker push ghcr.io/${{ github.repository_owner }}/trader_joe_data_store:${{ env.SHORT_SHA }}
    #     docker push ghcr.io/${{ github.repository_owner }}/trader_joe_data_store:latest

    # - name: Push Data Ingest Image
    #   run: |
    #     docker tag trader_joe_data_ingest ghcr.io/${{ github.repository_owner }}/trader_joe_data_ingest:${{ env.SHORT_SHA }}
    #     docker tag trader_joe_data_ingest ghcr.io/${{ github.repository_owner }}/trader_joe_data_ingest:latest
    #     docker push ghcr.io/${{ github.repository_owner }}/trader_joe_data_ingest:${{ env.SHORT_SHA }}
    #     docker push ghcr.io/${{ github.repository_owner }}/trader_joe_data_ingest:latest